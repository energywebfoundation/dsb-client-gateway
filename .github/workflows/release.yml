name: Release

on:
  push:
    branches: [ release ]

jobs:
  cancel-previous:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

  semantic-version:
    name: Semantic versioning
    runs-on: ubuntu-latest
    needs: [cancel-previous]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create semantic versioning
        id: semantic-version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}-prerelease${increment}"
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: false
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
    outputs:
      version_tag: ${{ steps.semantic-version.outputs.version_tag }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [cancel-previous, semantic-version]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Prepare docker image build (Sentry authentication)
      env:
        SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
      run: |
        echo "SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN" > .env.local

    - name: Build docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        BUILD_ID: ${{needs.semantic-version.outputs.version_tag}}
      run: |
        docker build -t dsb-client-gateway .
        docker tag dsb-client-gateway $ECR_REGISTRY/ew-dos-dsb-gateway-ecr:$BUILD_ID
        docker tag dsb-client-gateway $ECR_REGISTRY/ew-dos-dsb-gateway-ecr:latest

    - name: Scan local docker image
      uses: anchore/scan-action@v3
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        image: $ECR_REGISTRY/ew-dos-dsb-gateway-ecr:latest"
        fail-build: true
        severity-cutoff: critical

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        BUILD_ID: ${{needs.semantic-version.outputs.version_tag}}
      run: |
        docker push $ECR_REGISTRY/ew-dos-dsb-gateway-ecr:$BUILD_ID
        docker push $ECR_REGISTRY/ew-dos-dsb-gateway-ecr:latest

    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    - name: Login via Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Push image to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker tag dsb-client-gateway ${{ secrets.REGISTRY_LOGIN_SERVER }}/dsb/client-gateway:${{needs.semantic-version.outputs.version_tag}}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/dsb/client-gateway:${{needs.semantic-version.outputs.version_tag}}
        docker tag dsb-client-gateway ${{ secrets.REGISTRY_LOGIN_SERVER }}/dsb/client-gateway:latest
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/dsb/client-gateway:latest

  release-and-deploy:
    runs-on: ubuntu-latest
    needs: [cancel-previous, semantic-version, build-and-push]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build Changelog
      id: github_release
      uses: mikepenz/release-changelog-builder-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{needs.semantic-version.outputs.version_tag}}
        release_name: Release ${{needs.semantic-version.outputs.version_tag}}
        body: ${{steps.github_release.outputs.changelog}}

    - name: ArgoCD login
      uses: clowdhaus/argo-cd-action/@main
      id: argocd_login
      with:
        command: login ${{ secrets.ARGOCD_DEV_URL }}
        options: --insecure --password ${{ secrets.ARGOCD_DEV_PASS }} --username ${{ secrets.ARGOCD_DEV_USERNAME }}

    - name: ArgoCD overwrite image tag
      uses: clowdhaus/argo-cd-action/@main
      id: argocd_image_tag_overwrite
      with:
        command: app set dsb-gateway
        options: -p dsb-client-gateway.image.tag=${{needs.semantic-version.outputs.version_tag}}
