name: Build and deploy

on:
  push:
    branches: [ master ]

jobs:
  cancel-previous:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

  unique_id:
    runs-on: ubuntu-latest
    steps:
      - name: Generate unique id
        id: unique_id
        run: echo "::set-output name=id::$(uuidgen)"
    outputs:
      unique_id: ${{ steps.unique_id.outputs.id }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [cancel-previous, unique_id]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Prepare docker image build (Sentry authentication)
      env:
        SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
      run: |
        echo "SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN" > .env.local

    - name: Build docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        BUILD_ID: ${{needs.unique_id.outputs.unique_id}}
      run: |
        docker build -t dsb-client-gateway .
        docker tag dsb-client-gateway $ECR_REGISTRY/ew-dos-dsb-gateway-ecr:$BUILD_ID
        docker tag dsb-client-gateway $ECR_REGISTRY/ew-dos-dsb-gateway-ecr:canary

    - name: Scan local docker image
      uses: anchore/scan-action@v3
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        image: $ECR_REGISTRY/dsb-message-broker:canary
        fail-build: true
        severity-cutoff: critical

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push docker image to AWS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        BUILD_ID: ${{needs.unique_id.outputs.unique_id}}
      run: |
        docker push $ECR_REGISTRY/ew-dos-dsb-gateway-ecr:$BUILD_ID
        docker push $ECR_REGISTRY/ew-dos-dsb-gateway-ecr:canary

    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Push image (Azure)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker tag dsb-client-gateway ${{ secrets.REGISTRY_LOGIN_SERVER }}/dsb/client-gateway:${{needs.unique_id.outputs.unique_id}}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/dsb/client-gateway:${{needs.unique_id.outputs.unique_id}}
        docker tag dsb-client-gateway ${{ secrets.REGISTRY_LOGIN_SERVER }}/dsb/client-gateway:canary
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/dsb/client-gateway:canary

  deploy:
    runs-on: ubuntu-latest
    needs: [cancel-previous, unique_id, build-and-push]
    steps:
    - name: ArgoCD login
      uses: clowdhaus/argo-cd-action/@main
      id: argocd_login
      with:
        command: login ${{ secrets.ARGOCD_DEV_URL }}
        options: --insecure --password ${{ secrets.ARGOCD_DEV_PASS }} --username ${{ secrets.ARGOCD_DEV_USERNAME }}

    - name: ArgoCD overwrite image tag
      uses: clowdhaus/argo-cd-action/@main
      id: argocd_image_tag_overwrite
      with:
        command: app set dsb-gateway-dev
        options: -p dsb-client-gateway.image.tag=${{needs.unique_id.outputs.unique_id}}
